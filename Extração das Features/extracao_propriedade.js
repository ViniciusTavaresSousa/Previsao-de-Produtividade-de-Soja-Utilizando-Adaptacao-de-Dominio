var codigosMunicipios = [
4100459,
5208707,
5222203,
5211206,
4306353,
5107800,
4103156,
4105904,
5208400,
4309159,
4312450,
4301859,
4116406,
4119251,
5221908,
4300109,
4322707,
5208806,
4102604,
4112801,
4118303,
4322806,
4107751,
4116950,
5207105,
4111704,
4314456,
5209200,
4113254,
4302055,
4118105,
4301404,
4323606,
4300307,
5212907,
4314704,
4300703,
4323309,
5210000,
5212808,
5101704,
4126272,
4318051,
4318499,
4315172,
4103404,
4307864,
4107157,
4128302,
4108551,
5213905,
4109005,
5107404,
5208509,
4307203,
4315057,
4300638,
4124509,
4108106,
4121257,
4315909,
4322558,
4315008,
4320701,
4303400,
4109203,
5214408,
4106555,
5211602,
4301107,
4304853,
4110078,
4310751,
4313011,
4314001,
4322855,
4108700,
4313441,
4314027,
4302204,
4115754,
4117297,
4110052,
4312351,
4316477,
4123105,
4106704,
5210208,
4112306,
4106100,
4310504,
5204300,
4301958,
4322350,
4305157,
4102752,
5200803,
4120002,
5209408,
4103057,
4126652,
4111803,
4310538,
4306924,
4311908,
4306072,
4115457,
5206305,
5217302,
5107883,
4319372,
4323101,
4314506,
5200902,
4113809,
4123824,
4119202,
4316428,
4126207,
4313656,
4309407,
4316808,
4321634,
4311429,
5101001,
4313466,
4116604,
4319703,
4112108,
4103024,
5200829,
4116901,
4318440,
5219258,
4109757,
4314555,
4117800,
4306957,
4312377,
4122107,
4112900,
5211305,
4318622,
4318408,
4310579,
4301909,
4312302,
5209150,
4302378,
4303707,
5214002,
4308300,
4115507,
4117214,
4314068,
4312757,
4102703,
4322608,
4101051,
4307450,
5201306,
4308052,
4312500,
4320404,
4123204,
4322327,
4116307,
5221403,
4305207,
4113601,
4319364,
4312955,
4318457,
5212600,
4110656,
4309126,
4312625,
4305116,
4101150,
4126256,
4317558,
4313300,
5203104,
4114203,
4308508,
4311254,
4313607,
4319737,
4103503,
4311601,
4322152,
5220207,
4112702,
4107546,
4316303,
4314787,
4100103,
4107850,
4102208,
4107009,
4113429,
4312906,
5207808,
5204250,
4308250,
4322343,
4113452,
5219407,
4308805,
4321469,
4312203,
4310850,
4309258,
5209705,
4320263,
4113759,
4313391,
4318424,
4305124,
4103206,
4307559,
4120853,
4103800,
4317905,
4101002,
4314076,
5215256,
4317954,
5205455,
4303558,
4313490,
4322186,
5220702,
4104600,
5215900,
5107263,
4306056,
4315602,
4310413,
4320578,
4300554,
4123402,
4321105,
4309704,
4321907,
4111605,
4300455,
4321477,
4301552,
4322525,
4313102,
4320230,
4302709,
4306304,
4314134,
4124301,
4120333,
4302600,
4301206,
4315552,
4127809,
4321857,
5203401,
4115739,
4314464,
4107306,
4128658,
4117503,
4306320,
4122305,
4119004,
5212303,
4110003,
4312427,
4120150,
5216007,
4301701,
4119657,
4322905,
4310439,
4305371,
4117057,
5201108,
4123006,
4109708,
4302006,
4308706,
4125209,
5207907,
4312674,
4117271,
4303202,
5200308,
4108304,
5202502,
4121901,
4304309,
4323408,
4101655,
4304663,
4320321,
4303673,
4304101,
4314209,
4113106,
5205802,
4308409,
4306130,
5211701,
4323457,
4101853,
5217401,
4317004,
4311270,
4124103,
5201504,
4108452,
4122701,
4128401,
4114104,
4319406,
4115804,
4306973,
4124400,
5106208,
4119806,
4311700,
5221502,
4103958,
5209937,
4117255,
4117008,
4305801,
4319109,
4121307,
4323358,
4127205,
4308854,
4312252,
5220264,
5209903,
4122172,
4111001,
4113007,
4321956,
4115606,
4107801,
4300661,
5203906,
5219712,
4304952,
4127858,
4307104,
4309605,
4322103,
4125803,
4315354,
4303509,
4310462,
4110805,
4102505,
4126355,
4313425,
4316733,
4101101,
4107900,
4320206,
4120358,
4304903,
4310900,
4106001,
4109302,
5205513,
4123808,
4307302,
4111209,
5213053,
5219803,
5203575,
4111902,
4117404,
4306007,
4103222,
5215652,
4115309,
4317301,
5200100,
4112504,
4321402,
4320305,
4117222,
4117453,
4309902,
4321006,
4126678,
4126009,
4121406,
4125753,
4104501,
4107702,
4122156,
4307815,
4115408,
4112751,
4302154,
4309654,
5212204,
4106852,
4128500,
4312138,
4322301,
4120903,
4118600,
4126306,
4317756,
4319208,
4316204,
5106752,
4108205,
4124053,
4315404,
4125407,
4104451,
4305504,
4102406,
4128609,
5103106,
4302584,
4104055,
4306429,
4113403,
4107207,
4309506,
4103602,
4306734,
4109807,
4320909,
4304002,
4102802,
5106174,
4108650,
4111100,
5200605,
4310876,
4124707,
5108204,
4128708,
4103305,
4307054,
4304358,
5217203,
5102694,
4312708,
4316436,
4128559,
4105003,
4103354,
4303806,
4305850,
4121356,
4314407,
4113304,
4124806,
4313334,
4300471,
5107198,
4121703,
5106182,
4309951,
4105300,
4323200,
4301800,
4124020,
4306379,
5218052,
4315313,
4104402,
4307005,
4121109,
4308904,
5219209,
4300059,
4101705,
4316972,
4105607,
4107256,
5104906,
4128104,
4321493,
4123956,
4123709,
5100508,
5205059,
4106605,
4312104,
5103361,
4100509,
4103479,
5103452,
4123303,
4124608,
4312179,
4322376,
4124004,
5108857,
4116109,
5213004,
4112405,
4127908,
4121000,
4311106,
4118857,
4310553,
4305871,
4323754,
4315958,
5209952,
4303301,
4112207,
4108320,
4115101,
5222054,
4322533,
4110409,
4125555,
4313508,
5106109,
4104253,
5206909,
4125456,
4118006,
4317608,
4304671,
4108957,
4104204,
4120101,
4115853,
4102307,
4110953,
4116059,
4101309,
4107736,
4125100,
4127965,
4111407,
4100301,
4306502,
4119103,
4300851,
4104105,
4106209,
4101804,
5202809,
5221700,
5219357,
5210562,
4122909,
4323705,
4114302,
4319307,
5203203,
5211800,
5101308,
5219456,
4105508,
4121208,
5104104,
5108808,
5218003,
5102793,
5108055,
];

var anosSafras = [2019, 2020, 2021, 2022, 2023];
var propriedade  = area_imovel_PR.merge(area_imovel_RS).merge(area_imovel_GO).merge(area_imovel_MT)
    .filter(ee.Filter.inList("municipio_", codigosMunicipios));

propriedade = propriedade
    .randomColumn('rand', 42)
    .sort('rand')
    .limit(10000)
    .map(function(f) { return f.simplify(100); });

var colecaoMapBiomas = ee.Image('projects/mapbiomas-public/assets/brazil/lulc/collection9/mapbiomas_collection90_integration_v1');
var era5 = ee.ImageCollection("ECMWF/ERA5_LAND/DAILY_AGGR");

function adicionarAreaSoja(propriedades, sojaImg, ano) {
  return propriedades.map(function(f) {
    var sojaProp = sojaImg.clip(f.geometry());
    var areaPixels = sojaProp.multiply(ee.Image.pixelArea());
    var areaHa = areaPixels.reduceRegion({
      reducer: ee.Reducer.sum(),
      geometry: f.geometry(),
      scale: 30,
      maxPixels: 1e9
    }).get('classification_' + ano);

    return f.set('AreaSoja_ha', ee.Number(areaHa).divide(10000));
  });
}

function extrairVegetacao(ano) {
  var sojaMask = colecaoMapBiomas.select('classification_' + ano).eq(39);

  var propriedadeComArea = adicionarAreaSoja(propriedade, sojaMask, ano)
    .filter(ee.Filter.gte('AreaSoja_ha', 1))
    .filter(ee.Filter.lte('AreaSoja_ha', 50));

  var meses = ee.List.sequence(10, 12).map(function(m) { 
    return ee.Date.fromYMD(ano, m, 1);
  }).cat(ee.List.sequence(1, 2).map(function(m) { 
    return ee.Date.fromYMD(ano + 1, m, 1);
  }));

  var dadosPorMes = meses.map(function(dataInicio) {
    dataInicio = ee.Date(dataInicio);
    var dataFim = dataInicio.advance(1, 'month');

    var colecaoS2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
      .filterDate(dataInicio, dataFim)
      .filterBounds(propriedadeComArea)
      .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', 20))
      .map(function(image) {
        var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
        var ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI');
        
        return image.addBands([ndvi, ndwi]);
      });

    var ultimoVeg = colecaoS2.select(['NDVI','NDWI']).mean();
    var imagemVeg = ultimoVeg.updateMask(sojaMask).clip(propriedadeComArea);

    return imagemVeg.reduceRegions({
      collection: propriedadeComArea,
      reducer: ee.Reducer.mean(),
      //tileScale: 2,
      scale: 15,
      maxPixelsPerRegion : 1e9
    }).map(function(f) {
      return f.set({
        'AnoSafra': ano,
        'Mes': dataInicio.format('YYYY-MM')
      });
    });
  });

  return ee.FeatureCollection(dadosPorMes).flatten();
}

function extrairClima(ano) {
  var sojaMask = colecaoMapBiomas.select('classification_' + ano).eq(39);

  var propriedadeComArea = adicionarAreaSoja(propriedade, sojaMask, ano)
    .filter(ee.Filter.gte('AreaSoja_ha', 1))
    .filter(ee.Filter.lte('AreaSoja_ha', 50));

  var meses = ee.List.sequence(10, 12).map(function(m) { 
    return ee.Date.fromYMD(ano, m, 1);
  }).cat(ee.List.sequence(1, 2).map(function(m) { 
    return ee.Date.fromYMD(ano + 1, m, 1);
  }));

  var dadosPorMes = meses.map(function(dataInicio) {
    dataInicio = ee.Date(dataInicio);
    var dataFim = dataInicio.advance(1, 'month');

    var climaMes = era5.filterDate(dataInicio, dataFim);

    var tempK = climaMes.select('temperature_2m').map(function(img) {
      return img.updateMask(sojaMask);
    });
    var tempMax = tempK.reduce(ee.Reducer.max()).subtract(273.15).rename('TempMax');
    var tempMin = tempK.reduce(ee.Reducer.min()).subtract(273.15).rename('TempMin');

    var prec = climaMes.select('total_precipitation_sum')
      .map(function(img) { return img.updateMask(sojaMask); })
      .sum()
      .multiply(1000)
      .rename('Precipitacao');

    var rad = climaMes.select('surface_net_solar_radiation_sum')
      .map(function(img) { return img.updateMask(sojaMask); })
      .sum()
      .divide(1e6)
      .rename('RadiacaoSolar');

    var climaImg = tempMax.addBands([tempMin, prec, rad]);

    return climaImg.reduceRegions({
      collection: propriedadeComArea,
      reducer: ee.Reducer.mean(),
      scale: 9000,
      maxPixelsPerRegion : 1e9
    }).map(function(f) {
      return f.set({
        'AnoSafra': ano,
        'Mes': dataInicio.format('YYYY-MM')
      });
    });
  });

  return ee.FeatureCollection(dadosPorMes).flatten();
}

var colecaoVegetacao = ee.FeatureCollection(anosSafras.map(extrairVegetacao)).flatten();
var colecaoClima = ee.FeatureCollection(anosSafras.map(extrairClima)).flatten();

Export.table.toDrive({
  collection: colecaoVegetacao,
  folder: 'GEE',
  description: 'Features_Vegetacao',
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: colecaoClima,
  folder: 'GEE',
  description: 'Features_Clima_Prop',
  fileFormat: 'CSV'
});

var sojaVis = colecaoMapBiomas.select('classification_' + 2022).eq(39); 
var propriedadeComArea = adicionarAreaSoja(propriedade, sojaVis, 2022)
    .filter(ee.Filter.gte('AreaSoja_ha', 1))
    .filter(ee.Filter.lte('AreaSoja_ha', 50));

Map.addLayer(sojaVis.updateMask(sojaVis).clip(propriedadeComArea), {palette: ['yellow']}, 'Soja ' + anosSafras[4]); 

var propriedadeContorno = propriedadeComArea.style({ color: 'black', fillColor: '00000000',  width: 2 }); 
Map.addLayer(propriedadeContorno, {}, 'Propriedades');
